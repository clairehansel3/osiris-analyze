#!/usr/bin/env python3


import functools
import multiprocessing
import osiris_analyze


def main():
    analysis = osiris_analyze.prepare_analysis()
    if analysis.n_threads() == 1:
        for pass_idx in range(analysis.n_passes()):
            analysis.setup(pass_idx)
            result = None
            for iteration in range(analysis.n_iterations()):
                pass_result = analysis.do_pass(pass_idx, iteration)
                result = analysis.merge(pass_idx, result, pass_result)
            analysis.finalize(pass_idx, result)
    else:
        multiprocessing.set_start_method('spawn') # This is what's recommended on NERSC
        with multiprocessing.Pool(analysis.n_threads()) as pool:
            for pass_idx in range(analysis.n_passes()):
                analysis.setup(pass_idx)
                pass_partial = functools.partial(analysis.do_pass, pass_idx)
                result = None
                for pass_result in pool.imap_unordered(pass_partial, range(analysis.n_iterations())):
                    result = analysis.merge(pass_idx, result, pass_result)
                analysis.finalize(pass_idx, result)


if __name__ == '__main__':
    main()
